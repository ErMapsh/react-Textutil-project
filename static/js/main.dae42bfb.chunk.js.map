{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","mycolor","color","className","mode","href","style","title","type","id","to","about","class","role","onClick","red","yellow","green","idname","togglemode","forhtml","Textform","useState","text","setText","bodyfontcolor","heading","backgroundColor","rows","value","onChange","event","console","log","target","buttoncolor","Upcase","toUpperCase","showAlert","Lowercase","toLowerCase","navigator","clipboard","writeText","newText","split","join","joinarray","reverse","length","Alert","alert","world","lower","charAt","slice","capitalize","msg","defaultProps","App","setmode","setalert","setbuttoncolor","setbodyfontcolor","message","setTimeout","document","body","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dae42bfb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n// import a from \"E:/study/code with harry/React js/myreactapp/src/App.css\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  let mycolor = { color: \"white\" };\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-dark px-3`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand nav-link\" to=\"/\" style={mycolor}> */}\r\n        <a className=\"navbar-brand nav-link\" href=\"#\" style={mycolor}>\r\n          {\" \"}\r\n          {props.title}{\" \"}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link active \"\r\n                aria-current=\"page\"\r\n                to=\"/\"\r\n                style={mycolor}\r\n              >\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\" style={mycolor}>\r\n                About\r\n              </Link> */}\r\n            </li>\r\n\r\n            {/* {<li className=\"nav-item dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  Dropdown\r\n                </a>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  <li><a className=\"dropdown-item\" href=\"/\">About</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n                  <li><hr className=\"dropdown-divider\" /></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n                </ul>\r\n              </li> } */}\r\n\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link disabled\">{props.about}</a>\r\n            </li>\r\n          </ul>\r\n\r\n          <div\r\n            class=\"btn-group mx-3\"\r\n            role=\"group\"\r\n            aria-label=\"Basic mixed styles example\"\r\n          >\r\n            <button type=\"button\" class=\"btn btn-danger\" onClick={props.red}>\r\n              Red\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-warning\"\r\n              onClick={props.yellow}\r\n            >\r\n              Yellow\r\n            </button>\r\n            <button type=\"button\" class=\"btn btn-success\" onClick={props.green}>\r\n              Green\r\n            </button>\r\n          </div>\r\n\r\n          {/* <div className=\"form-check form-switch\" onClick={darkModeEnableDisable} > */}\r\n          <div\r\n            className={`form-check form-switch text-\r\n            // ${props.mode === \"light\" ? \"dark\" : \"light\"}\r\n            `}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              idname=\"flexSwitchCheckDefault\"\r\n              onClick={props.togglemode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              forhtml=\"flexSwitchCheckDefault\"\r\n              style={mycolor}\r\n            >{`Enable ${props.mode} Mode`}</label>\r\n          </div>\r\n\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"This is default title\",\r\n  about: \"This is default about\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  // const [text, setText] = useState(\"Enter Text Here\");\r\n  const [text, setText] = useState(\"\");\r\n  // setText(\"this is new text\"); like that we can change state of const\r\n\r\n  const HandleOnChange = (event) => {\r\n    console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  //for all buttons\r\n\r\n  //for uppercase\r\n  const handleUpClick = (event) => {\r\n      // setText(\"You have clicked on handleUpClick\");\r\n      let Upcase = text.toUpperCase();\r\n      setText(Upcase);\r\n      props.showAlert(\"Converted to uppercase\", \"success\");\r\n      console.log(`Uppercase was Clicked ${text}`);\r\n      console.log(event);  \r\n  };\r\n\r\n  //for lowercase\r\n  const handleUpClickLower = (event) => {\r\n    setText(\"You have clicked on handleUpClick\");\r\n    let Lowercase = text.toLowerCase();\r\n    setText(Lowercase);\r\n    props.showAlert(\"Converted to lowercase\", \"success\");\r\n  };\r\n\r\n  // clear text\r\n  const ClearText = (event) => {\r\n    setText(\"You have clicked on handleUpClick\");\r\n    let Lowercase = \"\";\r\n    setText(Lowercase);\r\n    props.showAlert(\"Cleared Text\", \"success\");\r\n  };\r\n\r\n  //excercise stuff\r\n  const CopyToClickBoard = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Copied Text\", \"success\");\r\n  };\r\n\r\n  //Remove Extra Spaces\r\n  const RemoveExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    // console.log(newText)\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Remove Extra spaces\", \"success\");\r\n  };\r\n\r\n  //reverse the string\r\n  const Reversethestring = () => {\r\n    let splitString = text.split(\"\");\r\n    let reverseArray = splitString.reverse();\r\n    let joinarray = reverseArray.join(\"\");\r\n    setText(joinarray);\r\n    props.showAlert(\"Reverse The string\", \"success\");\r\n  };\r\n  //for black color initially:\r\n  // let blackcolor = {\r\n  //   color: \"black\"\r\n  // }\r\n\r\n  //jsx start\r\n\r\n  return (\r\n    <div className={`bg-${props.mode}` } style={{color: props.bodyfontcolor}}>\r\n      <div className={`container py-3`}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"white\" : \"#bdbdbd\",\r\n            }}\r\n            rows={10}\r\n            value={text}\r\n            onChange={HandleOnChange}\r\n          />\r\n        </div>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2`}\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2`}\r\n          onClick={handleUpClickLower}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2`}\r\n          onClick={ClearText}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2`}\r\n          onClick={CopyToClickBoard}\r\n        >\r\n          Copy To click board\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2`}\r\n          onClick={RemoveExtraSpaces}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2`}\r\n          onClick={Reversethestring}\r\n        >\r\n          Reverse The String{\" \"}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"container my-3\">\r\n        <h2>Preview:</h2>\r\n        <p>{text.length > 0 ? text : \"Enter Your text to preview\"}</p>\r\n\r\n        <h2>What we copy:</h2>\r\n        <p>\r\n          {text.length > 0 ? text : \"Enter Your text to see, what we copeid\"}\r\n        </p>\r\n\r\n        <h4>Your Text Summary:</h4>\r\n        <p>\r\n          {text.split(\" \").length - 1} words and {text.length} characters\r\n        </p>\r\n        {/* here we need 1 minutes to read 125 words, so 1/25 is 0.008 , so we calculate no of words * 0.008 so we can get \r\n        no of minutes to read that sentence */}\r\n        <p>\r\n          We can read {text.split(\" \").length} words in\r\n          {text.split(\" \").length * 0.008} Minutes\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (world) => {\r\n    const lower = world.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        class={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}:</strong> {props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n      </div>\r\n    )\r\n  );\r\n}","import Navbar from \"./components/Navbar\";\r\nimport Textform from \"./components/Textform\";\r\n// import About from \"./components/About\";\r\nimport Alert from \"./components/Alert\";\r\nimport React, { useState } from \"react\";\r\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [mode, setmode] = useState(\"light\"); //whether dark mode in enable or not\r\n  const [alert, setalert] = useState(null)\r\n  //for different color need diff state;\r\n  const [buttoncolor, setbuttoncolor] = useState(\"primary\");\r\n  //setting up font color for different themes\r\n  const [bodyfontcolor, setbodyfontcolor] = useState(\"black\")\r\n\r\n  const showAlert = (message, type) => {\r\n    setalert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n\r\n    // if we dont setup timeout for our warning , then is begin a bug.\r\n    // we want to reslove this bug, then use this timeout\r\n    setTimeout(() => {\r\n      setalert(null);\r\n    }, 2000);\r\n  };\r\n\r\n  //light mode and dark mode logic\r\n  const togglemode = () => {\r\n    if (mode === \"light\") {\r\n      setmode(\"dark\");\r\n      setbodyfontcolor(\"white\")\r\n      document.body.style.background = \"#352164\";\r\n      showAlert(\"Dark Mode❤ Enable\", \"success\"); //we can change title dyanamically\r\n      setbuttoncolor(\"light\");\r\n      document.title = \"TextUtils-Dark Mode❤\";\r\n\r\n      // setInterval(() => {\r\n        //   document.title = \"TextUtils-Dark Mode❤\";\r\n      // }, 1500);\r\n\r\n      // setInterval(() => {\r\n      //   document.title = \"Textile-Home\";\r\n      // }, 1000);\r\n\r\n    } else{\r\n      setmode(\"light\");\r\n      setbodyfontcolor(\"black\")\r\n      document.body.style.background = \"white\";\r\n      showAlert(\"Light Mode Enable\", \"success\");\r\n      setbuttoncolor(\"primary\");\r\n    }\r\n  };\r\n\r\n  const Red = () => {\r\n    if (mode === \"light\"||\"yellow\"||\"green\") {\r\n      setmode(\"Red\");\r\n      document.body.style.background = \"#dc3545\";\r\n      // document.body.style.color = \"white\";\r\n      setbodyfontcolor(\"black\")\r\n      showAlert(\"Red mode Enable\", \"success\");\r\n      setbuttoncolor(\"warning\");\r\n    } \r\n  }\r\n\r\n  const Yellow = () => {\r\n    if (mode === \"light\"||\"red\"||\"green\") {\r\n      setmode(\"Yellow\");\r\n      document.body.style.background = \"#ffc107\";\r\n      // document.body.style.color = \"black\";\r\n      setbodyfontcolor(\"black\")\r\n      showAlert(\"Yellow mode Enable\", \"success\");\r\n      setbuttoncolor(\"danger\");\r\n    } \r\n  };\r\n\r\n  const Green = () => {\r\n    if (mode === \"light\"||\"Yellow\"||\"Red\") {\r\n      setmode(\"Green\");\r\n      document.body.style.background = \"#198754\";\r\n      // document.body.style.color = \"white\";\r\n      setbodyfontcolor(\"white\")\r\n      showAlert(\"Green mode Enable\", \"success\");\r\n      setbuttoncolor(\"secondary\");\r\n    } \r\n\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <Router> */}\r\n        <Navbar\r\n          title=\"TextUtils\"\r\n          about=\"Disabled1\"\r\n          togglemode={togglemode}\r\n          green={Green}\r\n          red={Red}\r\n          yellow={Yellow}\r\n          mode={mode}\r\n        />\r\n        <Alert alert={alert} showAlert={showAlert} />\r\n        {/* <Switch>\r\n          <Route exact path=\"/about\">\r\n            <About />\r\n          </Route> */}\r\n\r\n          {/* <Route exact path=\"/\"> */}\r\n          <Textform heading=\"Enter Text to Analyze Below\" showAlert={showAlert} buttoncolor={buttoncolor} bodyfontcolor={bodyfontcolor} />\r\n          {/* </Route> */}\r\n        {/* </Switch> */}\r\n      {/* </Router> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}