{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","mycolor","color","className","mode","to","style","title","type","id","role","onClick","red","cursor","yellow","green","idname","togglemode","forhtml","Textform","useState","text","setText","bodyfontcolor","heading","backgroundColor","rows","value","onChange","event","console","log","target","buttoncolor","Upcase","toUpperCase","showAlert","Lowercase","toLowerCase","navigator","clipboard","writeText","newText","split","join","joinarray","reverse","length","filter","element","About","btntext","setBtnText","background","mystyle","setmystyle","button","newbutton","darkModeEnableDisable","border","Alert","height","alert","class","world","lower","charAt","slice","capitalize","msg","defaultProps","about","App","setmode","setalert","setbuttoncolor","setbodyfontcolor","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2a0edc74.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  let mycolor = { color: \"white\" };\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-dark px-3`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n\r\n        {/* for deployement\r\n        <a className=\"navbar-brand nav-link\" href=\"#\" style={mycolor}>\r\n          {\" \"}{props.title}{\" \"}\r\n        </a> */}\r\n\r\n\r\n        <Link className=\"navbar-brand nav-link\" to=\"/\" style={mycolor}>\r\n          {\" \"}\r\n          {props.title}{\" \"}\r\n        </Link>\r\n\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n\r\n              {/* for deployment\r\n              <a href=\"#\" className=\"nav-link active\"\r\n                aria-current=\"page\"\r\n                style={mycolor}\r\n              >Home\r\n              </a> */}\r\n\r\n              <Link\r\n                className=\"nav-link active \"\r\n                aria-current=\"page\"\r\n                to=\"/\"\r\n                style={mycolor}\r\n              >\r\n                Home\r\n              </Link>\r\n\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\" style={mycolor}>\r\n                About\r\n              </Link>\r\n            </li>\r\n\r\n            {/* {<li className=\"nav-item dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  Dropdown\r\n                </a>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  <li><a className=\"dropdown-item\" href=\"/\">About</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n                  <li><hr className=\"dropdown-divider\" /></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n                </ul>\r\n              </li> } */}\r\n\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link disabled\">{props.about}</a>\r\n            </li> */}\r\n          </ul>\r\n\r\n          <div\r\n            className=\"btn-group mx-3\"\r\n            role=\"group\"\r\n            aria-label=\"Basic mixed styles example\"\r\n          >\r\n            <button type=\"button\" className=\"btn btn-danger\" onClick={props.red} style={{ cursor: \"pointer\" }}>\r\n              Red\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-warning\"\r\n              onClick={props.yellow}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              Yellow\r\n            </button>\r\n            <button type=\"button\" className=\"btn btn-success\" onClick={props.green} style={{ cursor: \"pointer\" }}>\r\n              Green\r\n            </button>\r\n          </div>\r\n\r\n          <div\r\n            className={`form-check form-switch text-\r\n            // ${props.mode === \"light\" ? \"dark\" : \"light\"}\r\n            `}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              idname=\"flexSwitchCheckDefault\"\r\n              onClick={props.togglemode}\r\n              style={{cursor: \"pointer\"}}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              forhtml=\"flexSwitchCheckDefault\"\r\n              style={mycolor}\r\n            >{`Enable ${props.mode} Mode`}</label>\r\n          </div>\r\n\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"This is default title\",\r\n  about: \"This is default about\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  // const [text, setText] = useState(\"Enter Text Here\");\r\n  const [text, setText] = useState(\"\");\r\n  // setText(\"this is new text\"); //like that we can change state of const\r\n\r\n  const HandleOnChange = (event) => {\r\n    console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  //for all buttons\r\n\r\n  //for uppercase\r\n  const handleUpClick = (event) => {\r\n      // setText(\"You have clicked on handleUpClick\");\r\n      let Upcase = text.toUpperCase();\r\n      setText(Upcase);\r\n      props.showAlert(\"Converted to uppercase\", \"success\");\r\n      console.log(`Uppercase was Clicked ${text}`);\r\n      console.log(event);  \r\n  };\r\n\r\n  //for lowercase\r\n  const handleUpClickLower = (event) => {\r\n    setText(\"You have clicked on handleUpClick\");\r\n    let Lowercase = text.toLowerCase();\r\n    setText(Lowercase);\r\n    props.showAlert(\"Converted to lowercase\", \"success\");\r\n  };\r\n\r\n  // clear text\r\n  const ClearText = (event) => {\r\n    setText(\"You have clicked on handleUpClick\");\r\n    let Lowercase = \"\";\r\n    setText(Lowercase);\r\n    props.showAlert(\"Cleared Text\", \"success\");\r\n  };\r\n\r\n  //excercise stuff\r\n  const CopyToClickBoard = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Copied Text\", \"success\");\r\n  };\r\n\r\n  //Remove Extra Spaces\r\n  const RemoveExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    // console.log(newText)\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Remove Extra spaces\", \"success\");\r\n  };\r\n\r\n  //reverse the string\r\n  const Reversethestring = () => {\r\n    let splitString = text.split(\"\");\r\n    let reverseArray = splitString.reverse();\r\n    let joinarray = reverseArray.join(\"\");\r\n    setText(joinarray);\r\n    props.showAlert(\"Reverse The string\", \"success\");\r\n  };\r\n  //for black color initially:\r\n  // let blackcolor = {\r\n  //   color: \"black\"\r\n  // }\r\n\r\n  //jsx start\r\n\r\n  return (\r\n    <div className={`bg-${props.mode}` } style={{color: props.bodyfontcolor}}>\r\n      <div className={`container py-3`}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"white\" : \"#bdbdbd\",\r\n            }}\r\n            rows={10}\r\n            value={text}\r\n            onChange={HandleOnChange}\r\n          />\r\n        </div>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2 my-1`}\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2 my-1`}\r\n          onClick={handleUpClickLower}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2 my-1`}\r\n          onClick={ClearText}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2 my-1`}\r\n          onClick={CopyToClickBoard}\r\n        >\r\n          Copy To click board\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2 my-1`}\r\n          onClick={RemoveExtraSpaces}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.buttoncolor} mx-2 my-1`}\r\n          onClick={Reversethestring}\r\n        >\r\n          Reverse The String{\" \"}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"container my-3\">\r\n        <h2>Preview:</h2>\r\n        <p>{text.length > 0 ? text : \"Enter Your text to preview\"}</p>\r\n\r\n        <h2>What we copy:</h2>\r\n        <p>\r\n          {text.length > 0 ? text : \"Enter Your text to see, what we copeid\"}\r\n        </p>\r\n\r\n        <h4>Your Text Summary:</h4>\r\n        <p>\r\n          {text.split(/\\s+/).filter((element)=>{ return element.length !== 0}).length} words and {text.length} characters\r\n        </p>\r\n        {/* here we need 1 minutes to read 125 words, so 1/25 is 0.008 , so we calculate no of words * 0.008 so we can get \r\n        no of minutes to read that sentence */}\r\n        <p>\r\n          We can read {text.split(/\\s+/).filter((element)=>{ return element.length !== 0}).length} words in\r\n          {text.split(/\\s+/).filter((element)=>{ return element.length !== 0}).length * 0.008} Minutes\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n\r\n    //setting hooks\r\n    const [btntext, setBtnText] = useState(\"Enable dark mode\");\r\n    const [mystyle, setmystyle] = useState({\r\n        color: \"black\",\r\n        background: \"white\"\r\n    });\r\n\r\n    const [button, newbutton] = useState(\"Enable Light mode\");\r\n\r\n    // event occur when toggle button\r\n    const darkModeEnableDisable = () => {\r\n        // console.log(\"darkModeEnable\")\r\n        if (mystyle.background === \"white\") {\r\n            setmystyle({\r\n                color: \"white\",\r\n                background: \"black\",\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Light mode\");\r\n            newbutton(\"Enable Dark mode\")\r\n        }\r\n        else {\r\n            setmystyle({\r\n                color: \"black\",\r\n                background: \"white\"\r\n            })\r\n            setBtnText(\"Enable Dark mode\")\r\n            newbutton(\"Enable Light mode\")\r\n        }\r\n    }\r\n\r\n    //we can also change mystyle, text in js\r\n    // but i set back theme for accordion before setting new hoosk\r\n\r\n    // mystyle_we_Can_set ={\r\n    //     color: \"white\",\r\n    //     background: \"black\"\r\n    // }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"container my-4 \" style={mystyle} >\r\n            <h1 className=\"container my-2\">About Us</h1>\r\n            <div className=\"accordion\" idname=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" idname=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div idname=\"collapseOne\" className=\"accordion-collapse collapse show\" style={mystyle} aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is\r\n                            shown by default, until the collapse plugin adds the appropriate\r\n                            classes that we use to style each element. These classes control\r\n                            the overall appearance, as well as the showing and hiding via CSS\r\n                            transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just\r\n                            about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" idname=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" style={mystyle} aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is\r\n                            hidden by default, until the collapse plugin adds the appropriate\r\n                            classes that we use to style each element. These classes control\r\n                            the overall appearance, as well as the showing and hiding via CSS\r\n                            transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just\r\n                            about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" idname=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" style={mystyle} aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is\r\n                            hidden by default, until the collapse plugin adds the appropriate\r\n                            classes that we use to style each element. These classes control\r\n                            the overall appearance, as well as the showing and hiding via CSS\r\n                            transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just\r\n                            about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-primary my-3\" onClick={darkModeEnableDisable}>{btntext}</button>\r\n\r\n            <div className=\"form-check form-switch\" onClick={darkModeEnableDisable} >\r\n                <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" idname=\"flexSwitchCheckDefault\" />\r\n                <label className=\"form-check-label\" forhtml=\"flexSwitchCheckDefault\">{button}</label>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (world) => {\r\n    const lower = world.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    <div style={{height:'50px'}}>\r\n      {props.alert && (\r\n      <div\r\n        class={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}:</strong> {props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n      </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import Navbar from \"./components/Navbar\";\r\nimport Textform from \"./components/Textform\";\r\nimport About from \"./components/About\";\r\nimport Alert from \"./components/Alert\";\r\nimport React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [mode, setmode] = useState(\"light\"); //whether dark mode in enable or not\r\n  const [alert, setalert] = useState(null)\r\n  //for different color need diff state;\r\n  const [buttoncolor, setbuttoncolor] = useState(\"primary\");\r\n  //setting up font color for different themes\r\n  const [bodyfontcolor, setbodyfontcolor] = useState(\"black\")\r\n\r\n  const showAlert = (message, type) => {\r\n    setalert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n\r\n    // if we dont setup timeout for our warning , then is begin a bug.\r\n    // we want to reslove this bug, then use this timeout\r\n    setTimeout(() => {\r\n      setalert(null);\r\n    }, 2000);\r\n  };\r\n\r\n  //light mode and dark mode logic\r\n  const togglemode = () => {\r\n    if (mode === \"light\") {\r\n      setmode(\"dark\");\r\n      setbodyfontcolor(\"white\")\r\n      document.body.style.background = \"#352164\";\r\n      showAlert(\"Dark Mode❤ Enable\", \"success\"); //we can change title dyanamically\r\n      setbuttoncolor(\"light\");\r\n      document.title = \"TextUtils-Dark Mode❤\";\r\n\r\n      // setInterval(() => {\r\n        //   document.title = \"TextUtils-Dark Mode❤\";\r\n      // }, 1500);\r\n\r\n      // setInterval(() => {\r\n      //   document.title = \"Textile-Home\";\r\n      // }, 1000);\r\n\r\n    } else{\r\n      setmode(\"light\");\r\n      setbodyfontcolor(\"black\")\r\n      document.body.style.background = \"white\";\r\n      showAlert(\"Light Mode Enable\", \"success\");\r\n      setbuttoncolor(\"primary\");\r\n    }\r\n  };\r\n\r\n  const Red = () => {\r\n    if (mode === \"light\"||\"yellow\"||\"green\") {\r\n      setmode(\"Red\");\r\n      document.body.style.background = \"#dc3545\";\r\n      // document.body.style.color = \"white\";\r\n      setbodyfontcolor(\"black\")\r\n      showAlert(\"Red mode Enable\", \"success\");\r\n      setbuttoncolor(\"warning\");\r\n    } \r\n  }\r\n\r\n  const Yellow = () => {\r\n    if (mode === \"light\"||\"red\"||\"green\") {\r\n      setmode(\"Yellow\");\r\n      document.body.style.background = \"#ffc107\";\r\n      // document.body.style.color = \"black\";\r\n      setbodyfontcolor(\"black\")\r\n      showAlert(\"Yellow mode Enable\", \"success\");\r\n      setbuttoncolor(\"danger\");\r\n    } \r\n  };\r\n\r\n  const Green = () => {\r\n    if (mode === \"light\"||\"Yellow\"||\"Red\") {\r\n      setmode(\"Green\");\r\n      document.body.style.background = \"#198754\";\r\n      // document.body.style.color = \"white\";\r\n      setbodyfontcolor(\"white\")\r\n      showAlert(\"Green mode Enable\", \"success\");\r\n      setbuttoncolor(\"secondary\");\r\n    } \r\n\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Navbar\r\n          title=\"TextUtils\"\r\n          about=\"Disabled1\"\r\n          togglemode={togglemode}\r\n          green={Green}\r\n          red={Red}\r\n          yellow={Yellow}\r\n          mode={mode}\r\n        />\r\n        <Alert alert={alert} showAlert={showAlert} />\r\n        <Switch>\r\n          <Route exact path=\"/about\">\r\n            <About />\r\n          </Route>\r\n\r\n          <Route exact path=\"/\">\r\n          <Textform heading=\"Enter Text to Analyze Below\" showAlert={showAlert} buttoncolor={buttoncolor} bodyfontcolor={bodyfontcolor} />\r\n          </Route> \r\n        </Switch>\r\n    </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}